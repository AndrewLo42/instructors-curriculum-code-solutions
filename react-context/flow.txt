User can sign up
- User can interact with the frontend signup form, inputting their username and password. This state-based form control will manage the user's input
- Once the user clicks the signup button, the information stored in the state will be sent to an endpoint on the server.
- The endpoint will recieve the information as the frontend makes a post request.
- The code in the endpoint will query the database with the proper information (and hashing the password), inserting the parameters into the appropriate columns

User can sign in
- User can interact with the frontend signin form, inputting their username and password. This state-based form control will manage the user's input
- Once the user clicks the signin button, the information stored in the state will be sent to an endpoint on the server.
- The endpoint will recieve the information as the frontend makes a post request.
- The code in the endpoint will query the database, sending in the username given in order to query for the correct row (if it exists) of information in the database
- If successful, the query will return the user's hashed password which will be compared with the password the user inputted earlier.
- If they match, the user will be logged in and their information will be stored on the json web token object (which will act like a cookie to remember the log in information)

User can stay signed in
- Similar to a point above, the user's information will be attatched to a token and kept for auth purposes
- The authorization is granted, the server returns an access token to the frontend app.
- The token is kept in the window's local storage.

User can sign out
- The user can click a signout button on the navbar
- When the button is clicked, the token will be removed from the local host and the user's information will be deleted
- Once this happens, the frontend code will redirect to the signup/signin page as per the auth methods that have been written to check for permissions to view content
